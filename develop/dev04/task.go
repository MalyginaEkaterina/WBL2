package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
Поиск анаграмм по словарю

Написать функцию поиска всех множеств анаграмм по словарю.


Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.


Требования:
Входные данные для функции: ссылка на массив, каждый элемент которого - слово на русском языке в кодировке utf8
Выходные данные: ссылка на мапу множеств анаграмм
Ключ - первое встретившееся в словаре слово из множества. Значение - ссылка на массив, каждый элемент которого,
слово из множества.
Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

*/

func main() {
	m := GetAnagrams([]string{"Тяпа", "Пятка", "Пятак", "слиток", "Листок", "Стол", "тяпка", "СТОЛИК"})
	fmt.Println(m)
}

// GetAnagrams группирует слова по анаграммам
func GetAnagrams(arr []string) map[string][]string {
	// мапа для исключения дублей
	set := make(map[string]struct{})
	// промежуточная мапа для формирования анаграмм
	m := make(map[string][]string)

	for _, word := range arr {
		lowWord := strings.ToLower(word)
		_, ok := set[lowWord]
		// если такое слово еще не встречалось
		if !ok {
			runes := []rune(lowWord)
			// сортируем руны слова, полученное слово и будет ключом в нашей промежуточной мапе
			sort.Slice(runes, func(i, j int) bool {
				return runes[i] < runes[j]
			})
			sortedWord := string(runes)
			m[sortedWord] = append(m[sortedWord], lowWord)
			set[lowWord] = struct{}{}
		}
	}
	res := make(map[string][]string)
	for _, v := range m {
		if len(v) > 1 {
			key := v[0]
			sort.Strings(v)
			res[key] = v
		}
	}
	return res
}
