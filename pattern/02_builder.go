package pattern

import "fmt"

/*
	Реализовать паттерн «строитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Builder_pattern
*/

/*
Строитель — это паттерн проектирования, который позволяет пошагово создавать объекты.
Когда создаётся сложный объект, у конструктора может быть слишком много параметров,
причём часть из них используются редко.
Вместо этого можно определить несколько методов-конструкторов,
которые будут отвечать за инициализацию определённых параметров.
Тогда сложный объект будет создаваться в несколько шагов.
Паттерн используется, когда:
 - нужно избавиться от одного сложного конструктора или целого набора;
 - надо пошагово создать сложный объект;
Пример использования на практике:
создание конфигураций сервера, который может быть настроен различными способами(например,выбор порта, включение/отключение
SSL, настройки логирования, метрик мониторинга и т.д.)
*/

type Object struct {
	// настраиваемые поля объекта
	Mode int
	Path string
}

func (o *Object) SetMode(mode int) *Object {
	o.Mode = mode
	return o
}

func (o *Object) SetPath(path string) *Object {
	o.Path = path
	return o
}

func NewObject() *Object {
	return &Object{}
}

func main() {
	o := NewObject().SetMode(1).SetPath(`root`)
	fmt.Println(o)
}
